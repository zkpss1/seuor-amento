{"version":3,"file":"web-CvV33mDM.js","sources":["../../node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","item","newPosix","isPathParent","parent","children","pathsA","pathsB","value","index","FilesystemWeb","WebPlugin","options","_a","_b","requestInit","buildRequestInit","response","blob","reader","bytes","chunks","contentType","contentLength","done","status","allChunks","position","chunk","reject","request","event","db","cmd","args","readFlag","conn","req","indexName","directory","uriPath","cleanedUriPath","fsPath","entry","data","encoding","doRecursive","occupiedEntry","parentPath","subDirIndex","parentArgPath","now","pathObj","ctime","depth","parentEntry","recursive","fullPath","readDirResult","entryPath","entries","e","subEntry","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","mtime","file","Encoding","writeResult","contents","filename","str"],"mappings":"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","x_google_ignoreList":[0]}